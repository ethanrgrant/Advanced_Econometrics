beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#calculate sample varriance
epsilon_sqrd = epsilon^2
#sigma_2 = sum(epsilon_sqrd)/(N-1)
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = 1/N*solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
print("white rejection: " + str(num_reject_white/B))
print("homo rejection: " + str(num_reject_homo/B))
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#calculate sample varriance
epsilon_sqrd = epsilon^2
#sigma_2 = sum(epsilon_sqrd)/(N-1)
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = 1/N*solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
print(cat("white rejection: ", num_reject_white/B))
print(cat("homo rejection: ", num_reject_homo/B))
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#calculate sample varriance
epsilon_sqrd = epsilon^2
#sigma_2 = sum(epsilon_sqrd)/(N-1)
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = 1/N*solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
print(cat("white rejection: ", num_reject_white/B)"")
print(cat("homo rejection: ", num_reject_homo/B)"")
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#calculate sample varriance
epsilon_sqrd = epsilon^2
#sigma_2 = sum(epsilon_sqrd)/(N-1)
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = 1/N*solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
cat("white rejection: ", num_reject_white/B)
cat("homo rejection: ", num_reject_homo/B)
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#calculate sample varriance
epsilon_sqrd = epsilon^2
#sigma_2 = sum(epsilon_sqrd)/(N-1)
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]%*%x[b,])^2))
v_white = 1/N*solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
cat("white rejection: ", num_reject_white/B)
print("")
cat("homo rejection: ", num_reject_homo/B)
print("")
}
white_error_demo(1, 1000, 100)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
cat("white rejection: ", num_reject_white/B)
print("")
cat("homo rejection: ", num_reject_homo/B)
print("")
}
white_error_demo(1, 1000, 100)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
cat("white rejection: ", num_reject_white/B)
print()
cat("homo rejection: ", num_reject_homo/B)
print()
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
cat("white rejection: ", num_reject_white/B, "\n")
print()
cat("homo rejection: ", num_reject_homo/B, "\n")
print()
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
white_error_demo <- function(x_pct, B, N){
#creates data and error
x = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
u = matrix(rnorm(N*B, 0, 1), nrow=B, ncol=N)
#generates epsilon and y
epsilon = exp(x_pct*x)*u
y = x+epsilon
#build structs to hold data
beta = numeric(B)
t_homo = numeric(B)
t_white = numeric(B)
#compute betas and test for reach b in B
for (b in 1:length(B)){
beta[b] = solve(t(x[b,])%*%x[b,])%*%x[b,]%*%y[b,]
#get homoskedastic SE
Q = t(x[b,])%*%x[b,]*1/N
v_homo = exp(8)*solve(Q)
#build white SE
sigma = (1/N*sum((epsilon[b,]*x[b,])^2))
v_white = solve(Q)%*%sigma%*%solve(Q)
}
t_white = (beta-1)/sqrt(v_white)
t_homo = (beta-1)/sqrt(v_homo)
num_reject_white = length(t_white[abs(t_white) > abs(qt(0.05/2, df=N-1))])
num_reject_homo = length(t_homo[abs(t_homo) > abs(qt(0.05/2, df=N-1))])
#report results
cat(cat("white rejection: ", num_reject_white/B), "\n")
cat(cat("homo rejection: ", num_reject_homo/B), "\n")
}
white_error_demo(1, 1000, 100)
white_error_demo(2, 1000, 1000)
white_error_demo(.1, 1000, 1000)
white_error_demo(0, 1000, 1000)
data = read.table('nerlov.dat', header=FALSE)
head(data)
setwd('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_2')
data = read.table('nerlov.dat', header=FALSE)
head(data)
#ii
#computes new vars by taking log of columns
log_TC = log(data[,1])
intercept = rep(1, length(log_TC))
log_Q = log(data[,2])
log_PL = log(data[,3])
log_PK = log(data[,4])
log_PF = log(data[,5])
n = length(log_TC)
k = ncol(X)
#iii
#binds variables into matrix
X = cbind(intercept, log_Q, log_PL, log_PK, log_PF)
beta_hat = solve(t(X)%*%X)%*%t(X)%*%log_TC #solves for beta_hat
X0 = cbind(log_Q, log_PL, log_PK, log_PF)
colnames(data) = c('TC', 'Q', 'PL', 'PF', 'PK')
# i.
n = nrow(data)
log_data = log(data)
y = log_data[,'TC']
constant = as.vector(rep(1,n))
X = matrix(data = c(constant, log_data[,'Q'], log_data[,'PL'], log_data[,'PK'], log_data[,'PF']), nrow = n, ncol = 5)
k = ncol(X)
# ii.
Betas = (solve(t(X)%*%X))%*%t(X)%*%y
Betas
beta_hat
residuals = y-X%*%Betas
P1 = matrix(1/n, n, n)
M1 = diag(n) - P1
r2_centered = 1 - ((t(residuals)%*%residuals)/(t(y)%*%M1%*%y))
r2_centered
r2_centered = 1 - ((t(residuals)%*%residuals)/(t(y)%*%M1%*%y))
r2_adjusted = 1 - ((t(residuals)%*%residuals)/(n-k))/((t(y)%*%M1%*%y)/(n-1))
print(Betas)
print(r2_centered)
print(r2_adjusted)
#finds rsquareds
log_TC_hat = X%*%beta_hat
#residual maker
M1 = diag(n) - intercept%*%solve(t(intercept)%*%intercept)%*%t(intercept)
beta_demean = solve(t(X0)%*%M1%*%X0)%*%t(X0)%*%(M1%*%log_TC)
#computes demeand y hat
y_hat_demean = (M1%*%X0)%*%beta_demean
log_TC_demean = M1%*%log_TC
#computes r squared and then adjusted r squared
centered_r = t(y_hat_demean)%*%(y_hat_demean)/(t(log_TC_demean)%*%(log_TC_demean))
adjusted_r = 1-(1-centered_r)*(n-1)/(n-k-1)
centered_r
adjusted_r
residual = log_TC - X%*%beta_hat
#calculate sample varriance unbiased
sigma_2 = sum(residual^2)/(n-k)
#calculates v homoskedastic and v white
v_homo = sigma_2*(solve(t(X)%*%X/n))
v_homo
sigma2 = sum(residuals^2) * (1/(n-k))
q = (1/n)*t(X)%*%X
v_homoskedastic = sigma2*solve(q)
v_homoskedastic
sigma_2
sigma2
head(log_TC)
head(y)
head(residual)
head(residuals)
head(X)
X = matrix(data = c(constant, log_data[,'Q'], log_data[,'PL'], log_data[,'PK'], log_data[,'PF']), nrow = n, ncol = 5)
head(X)
X = cbind(intercept, log_Q, log_PL, log_PK, log_PF)
X = cbind(intercept, log_Q, log_PL, log_PK, log_PF)
head(X)
log_TC = log(data[,1])
intercept = rep(1, length(log_TC))
log_Q = log(data[,2])
log_PL = log(data[,3])
log_PK = log(data[,4])
log_PF = log(data[,5])
n = length(log_TC)
k = ncol(X)
#iii
#binds variables into matrix
X = cbind(intercept, log_Q, log_PL, log_PK, log_PF)
beta_hat = solve(t(X)%*%X)%*%t(X)%*%log_TC #solves for beta_hat
X0 = cbind(log_Q, log_PL, log_PK, log_PF)
setwd('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_2')
data = read.table('nerlov.dat', header=FALSE)
head(data)
#ii
#computes new vars by taking log of columns
log_TC = log(data[,1])
intercept = rep(1, length(log_TC))
log_Q = log(data[,2])
data = read.table('nerlov.dat', header=FALSE)
head(data)
#ii
#computes new vars by taking log of columns
log_TC = log(data[,1])
intercept = rep(1, length(log_TC))
log_Q = log(data[,2])
log_PL = log(data[,3])
log_PK = log(data[,5])
log_PF = log(data[,4])
n = length(log_TC)
k = ncol(X)
#iii
#binds variables into matrix
X = cbind(intercept, log_Q, log_PL, log_PK, log_PF)
beta_hat = solve(t(X)%*%X)%*%t(X)%*%log_TC #solves for beta_hat
print(beta_hat)
X0 = cbind(log_Q, log_PL, log_PK, log_PF)
#finds rsquareds
log_TC_hat = X%*%beta_hat
#residual maker
M1 = diag(n) - intercept%*%solve(t(intercept)%*%intercept)%*%t(intercept)
beta_demean = solve(t(X0)%*%M1%*%X0)%*%t(X0)%*%(M1%*%log_TC)
#computes demeand y hat
y_hat_demean = (M1%*%X0)%*%beta_demean
log_TC_demean = M1%*%log_TC
#computes r squared and then adjusted r squared
centered_r = t(y_hat_demean)%*%(y_hat_demean)/(t(log_TC_demean)%*%(log_TC_demean))
adjusted_r = 1-(1-centered_r)*(n-1)/(n-k-1)
print(centered_r)
print(adjusted_r)
residual = log_TC - X%*%beta_hat
sigma_2 = sum(residual^2)/(n-k)
#calculates v homoskedastic and v white
v_homo = sigma_2*(solve(t(X)%*%X/n))
print(v_homo)
residual_sqrd = residual^2
sigma = matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
sigma[i,i] <- residual_sqrd[i]
}
v_white = (solve(t(X)%*%X/n)%*%t(X)%*%sigma%*%X%*%solve(t(X)%*%X/n))*(1/n)
print(v_white)
R = matrix(c(0, 0,1,1,1), nrow=1,ncol=k)
q= c(1)
z = R%*%beta_hat-q
sigma = solve(R%*%v_white%*%t(R))
wald = n*t(z)*sigma*z
print(wald)
z = R%*%beta_hat-q
sigma = solve(R%*%v_white%*%t(R))
wald = t(z)*sigma*z
print(wald)
if(wald<=qchisq(0.95, df=1)){
print('dont reject null')
}
wald = t(z)*sigma*z
print(wald)
simple_t_test = matrix(c(constant, X[,2], X[,3], X[,4]-X[,3], X[,4]-X[,4]))
betas_simple = solve(t(simple_X)%*%X)%*%t(X)%*%log_TC
X_t_test = cbind(X[,1],X[,2], PL_PF_PK)
simple_X = matrix(c(constant, X[,2], X[,3], X[,4]-X[,3], X[,4]-X[,4]))
betas_simple = solve(t(simple_X)%*%X)%*%t(X)%*%log_TC
simple_X = matrix(c(constant, X[,2], X[,3], X[,4]-X[,3], X[,4]-X[,4]), n)
betas_simple = solve(t(simple_X)%*%X)%*%t(X)%*%log_TC
simple_X = matrix(c(constant, X[,2], X[,3], X[,4]-X[,3], X[,4]-X[,4]), n)
betas_simple = solve(t(simple_X)%*%simple_X)%*%t(simple_X)%*%log_TC
simple_X = matrix(c(constant, X[,2], X[,3], X[,4]-X[,3], X[,5]-X[,3]), n)
betas_simple = solve(t(simple_X)%*%simple_X)%*%t(simple_X)%*%log_TC
residual_simple = log_TC-simple_X%*%betas_simple
sigma_simple = matrix(0, nrow=n, ncol=n)
for(i in 1:n){
sigma_simple[i,i] <- resdidual_simple[i]^2
}
residual_simple = log_TC-simple_X%*%betas_simple
sigma_simple = matrix(0, nrow=n, ncol=n)
for(i in 1:n){
sigma_simple[i,i] <- resdidual_simple[i]^2
}
residual_simple = log_TC-simple_X%*%betas_simple
sigma_simple = matrix(0, nrow=n, ncol=n)
for(i in 1:n){
sigma_simple[i,i] <- residual_simple[i]^2
}
v_white_simple = (solve(t(simple_X)%*%simple_X/n)%*%t(simple_X)%*%sigma_simple%*%simple_X%*%solve(t(simple_X)%*%simple_X/n))*(1/n)
print(v_white_simple)
t_test = (betas_simple[3]-q)/sqrt(v_white_simple)[3,3]))
t_test = (betas_simple[3]-q)/sqrt(v_white_simple)[3,3])
t_test = (betas_simple[3]-q)/sqrt(v_white_simple[3,3])
print(t_test)
print(t_test)
if (abs(t_test) < abs(qt(0.05/2, df=n-k))) {
print('dont reject null')
}
#test for greater than
if (t_test < qt(0.95, df=n-k)) {
print('dont reject null')
}
#test for less than
if (t_test > qt(0.05, df=n-k)) {
print('dont reject null')
}
c = beta_hat[3]*beta_hat[4]*beta_hat[5]
q = c(0)
G = matrix(c(0, 0, beta_hat[4]*beta_hat[5], beta_hat[3]*beta_hat[5], beta_hat[3]*beta_hat[4]), 1, k)
H_func = c - q
W_func = t(H_func)%*%solve(G%*%v_white%*%t(G))%*%H_func
print(W_func)
# xiv.
if (W_func < qchisq(0.95, df=1)) {
print('Don\'t reject null hypothesis.')
}
print(t_test)
