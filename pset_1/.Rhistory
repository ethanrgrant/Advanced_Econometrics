help("exprnd")
data <- rexp(256, 1)
data
sum(data)
exp(log(gamma(x, alpha+ 256, .2+sum(data))))
exp(log(gamma(data, alpha+ 256, .2+sum(data))))
theta <- 1
n <- c(4, 8, 16, 256)
alpha <- 2
beta <- .2
data <- rexp(256, 1)
exp(log(gamma(data, alpha+ 256, .2+sum(data))))
help(gamma)
len(data)
dim(data)
length(data)
alpha_list <- rep(0, 256)
alpha[1] <- 2
alpha_list
alpha_list[1] <- 2
alpha_list
alpha <- rep(0, 256)
alpha[1] <- 2
beta <- rep(0, 256)
beta[1] <- .2
theta <- 1
alpha <- 2
beta <- .2
dgamma(data, alpha + 256, 1/(beta+sum(x[1:256]))
)
dgamma(data, alpha + 256, 1/(beta+sum(data[1:256])
)
)
dgamma(data, alpha + 256, (beta+sum(data[1:256])))
ggplot(dgamma(data, alpha + 256, (beta+sum(data[1:256]))))
plot(dgamma(data, alpha + 256, (beta+sum(data[1:256]))))
theta <- 1
alpha <- 2
beta <- .2
n <- c(4, 8, 16, 256)
data <- rexp(256, 1)
for (i in 1:4) {
sum <- sum(ex[1:n[i]])
x_n <- n[i]
new_alph <- alpha + n
new_beta <- beta + sum
plot <- dgamma(g_points, rate = new_beta, shape = new_alph)
if (i == 1) plot(g_points, g, ylim = range(0, 7), xlab = "", ylab = "")
else points(g_points, g, col = i*10)
}
theta <- 1
alpha <- 2
beta <- .2
n <- c(4, 8, 16, 256)
points <- seq(0, 4, 0.01)
data <- rexp(256, 1)
for (i in 1:4) {
sum <- sum(ex[1:n[i]])
x_n <- n[i]
new_alph <- alpha + n
new_beta <- beta + sum
plot <- dgamma(points, rate = new_beta, shape = new_alph)
if (i == 1) plot(points, plot, ylim = range(0, 7), xlab = "", ylab = "")
else points(points, plot, col = i*10)
}
theta <- 1
alpha <- 2
beta <- .2
n <- c(4, 8, 16, 256)
points <- seq(0, 4, 0.01)
data <- rexp(256, 1)
for (i in 1:4) {
plot <- dgamma(points, rate = beta + sum(ex[1:n[i]]), shape = alpha + n[i])
if (i == 1)
plot(points, plot, ylim = range(0, 7), xlab = "", ylab = "")
else points(points, plot, col = i*10)
}
forsum <- rep(256,1)
forsum
theta <- 1
alpha <- 2
beta <- .2
n <- c(4, 8, 16, 256)
points <- seq(0, 4, 0.01)
data <- rexp(256, 1)
forsum <- rep(256,1)
for (i in 1:4) {
plot <- dgamma(points, rate = beta + sum(forsum[1:n[i]]), shape = alpha + n[i])
if (i == 1)
plot(points, plot, ylim = range(0, 7), xlab = "", ylab = "")
else points(points, plot, col = i*10)
}
theta <- 1
alpha <- 2
beta <- .2
n <- c(4, 8, 16, 256)
plot_points <- seq(0, 4, 0.01)
data <- rexp(256, 1)
forsum <- rep(256,1)
for (i in 1:4) {
plot <- dgamma(points, rate = beta + sum(forsum[1:n[i]]), shape = alpha + n[i])
if (i == 1)
plot(plot_points, plot, ylim = range(0, 7), xlab = "", ylab = "")
else points(plot_points, plot, col = i*10)
}
plot <- dgamma(points, rate = beta + sum(forsum[1:n[i]]), shape = alpha + n[i])
plot <- dgamma(points, rate = beta + sum(forsum[1:4]), shape = alpha + 4)
# Raghav Bansal
# rb3033
# Stat W4400
# HW05 program code
# Problem 2: Conjugacy
# g.
alpha <- 2
beta <- 0.2
n_observations <- c(4, 8, 16, 256)
g_points <- seq(0, 4, 0.01)
forsum <- rexp(256, rate = 1)
for (i in 1:length(n_observations)) {
sum_xn <- sum(forsum[1:n_observations[i]])
n <- n_observations[i]
a <- alpha + n
b <- beta + sum_xn
g <- dgamma(g_points, rate = b, shape = a)
if (i == 1) plot(g_points, g, ylim = range(0, 7), xlab = "", ylab = "")
else points(g_points, g, col = i*10)
}
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Junior Spring/Stat ML/hw5/hw_5.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
beta_0 = rep(1,B)
beta_0 = rep(1,2)
beta_0
for(b in 5){
print b
}
for(b in 1:5){
print b
}
B=5
for(b in 1:B){
print(B)
}
help matrix
?matrix
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
?matrix
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
warnings()
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
?traceback
traceback()
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
traceback()
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
set.seed(123)
N=1000
K=5
Xtilde=matrix(rnorm(N*K,0,1),N,K)
X1=Xtilde[,1]
X2=Xtilde[,2]+X1
X3=Xtilde[,3]+X2
X4=Xtilde[,4]+X3
X5=Xtilde[,5]+X4
X=matrix(c(X1,X2,X3,X4,X5),N,5)
V=var(X)
print(V)
# ii.
TheFunction <- function(N,B,X) {
x=X[1:N,] # [1:N,] means that we want rows from 1 to N and all columns
beta0 = rep(1,5) # beta0 = (1,1,1,1,1)
Betas = matrix(0,B,5) # We want to store the betas in a matrix
# we repeat the experiment B times for 5
# coefficients so the matrix is B by 5
variances = matrix(0,B,2) # We compute 2 variances each time
tstats = matrix(0,B,2) # And two t-statistics
for (b in 1:B) {
eb = rnorm(N,0,sqrt(2)) # Generate N e1,...,eN
yb = x%*%beta0 + eb
Betas[b,] = (solve(t(x)%*%x))%*%t(x)%*%yb # Compute beta estimates with OLS matrix formula
residuals = yb-x%*%Betas[b,] # Compute residuals
variances[b,1] = sum(residuals^2) * (1/N) # Compute asymptotic variance
variances[b,2] = sum(residuals^2) * (1/(N-ncol(X))) # Compute finite sample variance
tstats[b,1] = (Betas[b,1]-beta0[1])/(sqrt(variances[b,1]*solve(t(x)%*%x)[1,1]))
tstats[b,2] = (Betas[b,1]-beta0[1])/(sqrt(variances[b,2]*solve(t(x)%*%x)[1,1]))
# Compute t-statistics for first coefficient with both variances
}
return(list(betas=Betas,var_residuals=variances,t_stats=tstats))
# return list of matrices containing betas, variances, and t-stats
}
# iii.
B = 1000
Ns = c(10, 20, 100, 1000)
for (i in 1:length(Ns)) {
TheFunction(Ns[i],B,X)
}
N = 1000
var_OLSbetas_estimate = var(TheFunction(N,B,X)$betas)
var_OLSbetas = solve(t(X)%*%X) * 2
print(var_OLSbetas_estimate)
print(var_OLSbetas)
# iv.
# Compute mean finite and asymptotic variances for all N
mean_vars = matrix(0,length(Ns),2)
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
variances = results$var_residuals
mean_vars[i,1] = mean(variances[,1])
mean_vars[i,2] = mean(variances[,2])
}
print(mean_vars)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
set.seed(123)
N=1000
K=5
Xtilde=matrix(rnorm(N*K,0,1),N,K)
X1=Xtilde[,1]
X2=Xtilde[,2]+X1
X3=Xtilde[,3]+X2
X4=Xtilde[,4]+X3
X5=Xtilde[,5]+X4
X=matrix(c(X1,X2,X3,X4,X5),N,5)
V=var(X)
print(V)
# ii.
TheFunction <- function(N,B,X) {
x=X[1:N,] # [1:N,] means that we want rows from 1 to N and all columns
beta0 = rep(1,5) # beta0 = (1,1,1,1,1)
Betas = matrix(0,B,5) # We want to store the betas in a matrix
# we repeat the experiment B times for 5
# coefficients so the matrix is B by 5
variances = matrix(0,B,2) # We compute 2 variances each time
tstats = matrix(0,B,2) # And two t-statistics
for (b in 1:B) {
eb = rnorm(N,0,sqrt(2)) # Generate N e1,...,eN
yb = x%*%beta0 + eb
Betas[b,] = (solve(t(x)%*%x))%*%t(x)%*%yb # Compute beta estimates with OLS matrix formula
residuals = yb-x%*%Betas[b,] # Compute residuals
variances[b,1] = sum(residuals^2) * (1/N) # Compute asymptotic variance
variances[b,2] = sum(residuals^2) * (1/(N-ncol(X))) # Compute finite sample variance
tstats[b,1] = (Betas[b,1]-beta0[1])/(sqrt(variances[b,1]*solve(t(x)%*%x)[1,1]))
tstats[b,2] = (Betas[b,1]-beta0[1])/(sqrt(variances[b,2]*solve(t(x)%*%x)[1,1]))
# Compute t-statistics for first coefficient with both variances
}
return(list(betas=Betas,var_residuals=variances,t_stats=tstats))
# return list of matrices containing betas, variances, and t-stats
}
# iii.
B = 1000
Ns = c(10, 20, 100, 1000)
for (i in 1:length(Ns)) {
TheFunction(Ns[i],B,X)
}
N = 1000
var_OLSbetas_estimate = var(TheFunction(N,B,X)$betas)
var_OLSbetas = solve(t(X)%*%X) * 2
print(var_OLSbetas_estimate)
print(var_OLSbetas)
# iv.
# Compute mean finite and asymptotic variances for all N
mean_vars = matrix(0,length(Ns),2)
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
variances = results$var_residuals
mean_vars[i,1] = mean(variances[,1])
mean_vars[i,2] = mean(variances[,2])
}
print(mean_vars)
# v.
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
t_stats1 = results$t_stats[,1]
Z = rnorm (1000)
m <- mean(Z)
std <- sd(Z)
hist (t_stats1, density=20, breaks=20, prob=TRUE,
xlab ="t_1",
main = paste("Histogram of t_1 and the normal pdf (n=",Ns[i],")"))
curve(dnorm(x, mean=m , sd=std),
col ="darkblue", lwd=2 , add=TRUE , yaxt="n")
}
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
t_stats1 = results$t_stats[,2]
Z = rnorm (1000)
m <- mean(Z)
std <- sd(Z)
hist (t_stats1, density=20, breaks=20, prob=TRUE,
xlab ="t_2",
main = paste("Histogram of t_2 and the normal pdf (n=",Ns[i],")"))
curve(dnorm(x, mean=m , sd=std),
col ="darkblue", lwd=2 , add=TRUE , yaxt="n")
}
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
source('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1/pset_1.r', echo=TRUE)
# Problem Set 1
# Raghav Bansal
# rb3033
# Problem 1
# i.
set.seed(123)
N=1000
K=5
Xtilde=matrix(rnorm(N*K,0,1),N,K)
X1=Xtilde[,1]
X2=Xtilde[,2]+X1
X3=Xtilde[,3]+X2
X4=Xtilde[,4]+X3
X5=Xtilde[,5]+X4
X=matrix(c(X1,X2,X3,X4,X5),N,5)
V=var(X)
print(V)
# ii.
TheFunction <- function(N,B,X) {
x=X[1:N,] # [1:N,] means that we want rows from 1 to N and all columns
beta0 = rep(1,5) # beta0 = (1,1,1,1,1)
Betas = matrix(0,B,5) # We want to store the betas in a matrix
# we repeat the experiment B times for 5
# coefficients so the matrix is B by 5
variances = matrix(0,B,2) # We compute 2 variances each time
tstats = matrix(0,B,2) # And two t-statistics
for (b in 1:B) {
eb = rnorm(N,0,sqrt(2)) # Generate N e1,...,eN
yb = x%*%beta0 + eb
Betas[b,] = (solve(t(x)%*%x))%*%t(x)%*%yb # Compute beta estimates with OLS matrix formula
residuals = yb-x%*%Betas[b,] # Compute residuals
variances[b,1] = sum(residuals^2) * (1/N) # Compute asymptotic variance
variances[b,2] = sum(residuals^2) * (1/(N-ncol(X))) # Compute finite sample variance
tstats[b,1] = (Betas[b,1]-beta0[1])/(sqrt(variances[b,1]*solve(t(x)%*%x)[1,1]))
tstats[b,2] = (Betas[b,1]-beta0[1])/(sqrt(variances[b,2]*solve(t(x)%*%x)[1,1]))
# Compute t-statistics for first coefficient with both variances
}
return(list(betas=Betas,var_residuals=variances,t_stats=tstats))
# return list of matrices containing betas, variances, and t-stats
}
# iii.
B = 1000
Ns = c(10, 20, 100, 1000)
for (i in 1:length(Ns)) {
TheFunction(Ns[i],B,X)
}
N = 1000
var_OLSbetas_estimate = var(TheFunction(N,B,X)$betas)
var_OLSbetas = solve(t(X)%*%X) * 2
print(var_OLSbetas_estimate)
print(var_OLSbetas)
# iv.
# Compute mean finite and asymptotic variances for all N
mean_vars = matrix(0,length(Ns),2)
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
variances = results$var_residuals
mean_vars[i,1] = mean(variances[,1])
mean_vars[i,2] = mean(variances[,2])
}
print(mean_vars)
# v.
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
t_stats1 = results$t_stats[,1]
Z = rnorm (1000)
m <- mean(Z)
std <- sd(Z)
hist (t_stats1, density=20, breaks=20, prob=TRUE,
xlab ="t_1",
main = paste("Histogram of t_1 and the normal pdf (n=",Ns[i],")"))
curve(dnorm(x, mean=m , sd=std),
col ="darkblue", lwd=2 , add=TRUE , yaxt="n")
}
for (i in 1:length(Ns)) {
results = TheFunction(Ns[i],B,X)
t_stats1 = results$t_stats[,2]
Z = rnorm (1000)
m <- mean(Z)
std <- sd(Z)
hist (t_stats1, density=20, breaks=20, prob=TRUE,
xlab ="t_2",
main = paste("Histogram of t_2 and the normal pdf (n=",Ns[i],")"))
curve(dnorm(x, mean=m , sd=std),
col ="darkblue", lwd=2 , add=TRUE , yaxt="n")
}
#vi.
TheFunction2 <- function(N,B,X) {
x=X[1:N,] # [1:N,] means that we want rows from 1 to N and all columns
beta0 = rep(1,5) # beta0 = (1,1,1,1,1)
Betas = matrix(0,B,5) # We want to store the betas in a matrix
# we repeat the experiment B times for 5
# coefficients so the matrix is B by 5
variances = matrix(0,B,2) # We compute 2 variances each time
tstats = matrix(0,B,2) # And two t-statistics
for (b in 1:B) {
eb = rnorm(N,0,sqrt(2)) # Generate N e1,...,eN
yb = x%*%beta0 + eb
Betas[b,] = (solve(t(x)%*%x))%*%t(x)%*%yb # Compute beta estimates with OLS matrix formula
residuals = yb-x%*%Betas[b,] # Compute residuals
variances[b,1] = sum(residuals^2) * (1/N) # Compute asymptotic variance
variances[b,2] = sum(residuals^2) * (1/(N-ncol(X))) # Compute finite sample variance
tstats[b,1] = (Betas[b,1]-0)/(sqrt(variances[b,1]*solve(t(x)%*%x)[1,1]))
tstats[b,2] = (Betas[b,1]-0)/(sqrt(variances[b,2]*solve(t(x)%*%x)[1,1]))
# Compute t-statistics for first coefficient with both variances
}
return(list(betas=Betas,var_residuals=variances,t_stats=tstats))
# return list of matrices containing betas, variances, and t-stats
}
t_stats=TheFunction2(N,B,X)$t_stats
per_reject_null = sum(abs(t_stats)>1.96)/(nrow(t_stats)*ncol(t_stats))
#this computes percentage of t-stats that are significant at the 5% level
print(per_reject_null*100)
install.package('foreign')
library(foreign)
setwd(dirname(parent.frame(2)$ofile))
data = read.dta('TeachingRatings.dta')
install.packages('foreign')
library(foreign)
setwd(dirname(parent.frame(2)$ofile))
data = read.dta('TeachingRatings.dta')
install.packages("foreign")
setwd('C:\Users\Ethan\Desktop\Columbia\Senior_Fall\Advanced_Econometrics\pset_1')
setwd('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1')
data = read.dta('TeachingRatings.dta')
setwd('C:/Users/Ethan/Desktop/Columbia/Senior_Fall/Advanced_Econometrics/pset_1')
data = read.dta('TeachingRatings.dta')
#ii
y=data$course_eval
X=cbind(1, data$beauty, data$age)
colnames(X)=c('intercept', 'beauty', 'age')
plot(Y, X[,'beauty'])
beta_hat <- solve(t(X)%*%X)%*%t(X)%*%Y
residual <- Y - X%*%beta_hat
mean(residual)
var(residual)
M <- diag(length(y))-X%*%solve(t(X)%*%X)%*%t(X)
residual_2 <- M%*%y
mean(residual_2)
sd(resdiaul_2)
#iii
X1 = rep(1, 3)
X0 = X
I = diag(length(y))
M1 = I - X1%*%solve(t(X1)%*%X1)%*%t(X1)
beta = X0%*%solve(t(X0)%*%X0)%*%t(X0)
#FW estimates
#iv
var = var(X0)*solve(t(X0)%*%X0)
var
X0 = X['beauty':"age"]
X0 = X["age"]
x0
X0
X0 = X['beauty']
X0
X0 = cbind(X[,'beauty'], X[,'age'])
x0
X0
X1 = rep(1, length(X[,'beauty'])
)
X0 = cbind(X[,'beauty'], X[,'age'])
I = diag(length(y))
M1 = I - X1%*%solve(t(X1)%*%X1)%*%t(X1)
beta = X0%*%solve(t(X0)%*%X0)%*%t(X0)
var = var(X0)*solve(t(X0)%*%X0)
var
